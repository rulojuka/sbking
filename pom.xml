<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>br.com.sbk</groupId>
	<artifactId>sbking-vscode</artifactId>
	<version>1.0.0-alpha</version>
	<name>SBKing</name>
	<description>More information at https://github.com/rulojuka/sbking</description>

	<!-- Adds the base pom from spring boot -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.1</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<sonar.projectKey>rulojuka_sbking</sonar.projectKey>
		<sonar.organization>rulojuka</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.sources>src/main</sonar.sources>
		<sonar.tests>src/test</sonar.tests>
		<sonar.issue.ignore.multicriteria>e1,e2,e3</sonar.issue.ignore.multicriteria>
		<sonar.issue.ignore.multicriteria.e1.ruleKey>java:S3457</sonar.issue.ignore.multicriteria.e1.ruleKey> <!--stringConcatenation-->
		<sonar.issue.ignore.multicriteria.e1.resourceKey>**/*</sonar.issue.ignore.multicriteria.e1.resourceKey>
		<sonar.issue.ignore.multicriteria.e2.ruleKey>java:S2293</sonar.issue.ignore.multicriteria.e2.ruleKey> <!--diamondOperatorTypeInference-->
		<sonar.issue.ignore.multicriteria.e2.resourceKey>**/*</sonar.issue.ignore.multicriteria.e2.resourceKey>
		<sonar.issue.ignore.multicriteria.e3.ruleKey>java:S2142</sonar.issue.ignore.multicriteria.e3.ruleKey> <!--ignoredInterruptedException-->
		<sonar.issue.ignore.multicriteria.e3.resourceKey>**/*</sonar.issue.ignore.multicriteria.e3.resourceKey>
		<java.version>17</java.version> <!-- For spring-boot-maven-plugin -->
		<sbking.commons-beanutils.version>1.9.4</sbking.commons-beanutils.version>
		<sbking.commons-configuration2.version>2.10.1</sbking.commons-configuration2.version>
		<sbking.hibernate-core.version>6.2.2.Final</sbking.hibernate-core.version>
		<sbking.httpclient.version>5.2.1</sbking.httpclient.version>
		<sbking.jackson.version>2.15.2</sbking.jackson.version>
		<!-- https://github.com/junit-team/junit5/issues/2881 will have to upgrade spring boot first -->
		<!-- before bringing the most recent junit version (5.9.3)-->
		<sbking.junit.version>5.7.0</sbking.junit.version>
		<sbking.log4j-core.version>2.20.0</sbking.log4j-core.version>
		<sbking.mockito-core.version>5.4.0</sbking.mockito-core.version>
		<sbking.mysql-connector-j.version>8.0.33</sbking.mysql-connector-j.version>
		<sbking.spring-websocket.version>5.3.27</sbking.spring-websocket.version>
		<sbking.plugin.maven-checkstyle-plugin.version>3.3.0</sbking.plugin.maven-checkstyle-plugin.version>
		<sbking.plugin.maven-compiler-plugin.version>3.11.0</sbking.plugin.maven-compiler-plugin.version>
		<sbking.plugin.maven-surefire-plugin.version>3.1.2</sbking.plugin.maven-surefire-plugin.version>
		<sbking.plugin.jacoco-maven-plugin.version>0.8.10</sbking.plugin.jacoco-maven-plugin.version>
		<sbking.plugin.spotbugs-maven-plugin.version>4.7.3.5</sbking.plugin.spotbugs-maven-plugin.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${sbking.junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${sbking.mockito-core.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${sbking.log4j-core.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-configuration2</artifactId>
			<version>${sbking.commons-configuration2.version}</version>
		</dependency>
		<!-- This commons-beanutils is needed for commons-configuration2 because the maven package is broken. -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>${sbking.commons-beanutils.version}</version>
		</dependency>
		<dependency>
			<groupId>org.hibernate.orm</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${sbking.hibernate-core.version}</version>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<version>${sbking.mysql-connector-j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
		<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
			<version>${sbking.spring-websocket.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-messaging</artifactId>
			<version>${sbking.spring-websocket.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${sbking.jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId> 
			<version>${sbking.jackson.version}</version>
		</dependency>
		<!-- Client dependencies -->
		<dependency>
			<groupId>org.apache.httpcomponents.client5</groupId>
			<artifactId>httpclient5</artifactId>
			<version>${sbking.httpclient.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents.client5</groupId>
			<artifactId>httpclient5-fluent</artifactId>
			<version>${sbking.httpclient.version}</version>
		</dependency>
	</dependencies>

	<build> <!-- Run mvn fr.jcgay.maven.plugins:buildplan-maven-plugin:list-phase to see the phase and goals-->
		<plugins>
			<!-- Phase: validate - check if all information necessary for the build is available -->
			<plugin>
				<!-- Goal: checkstyle:check -->
				<!-- Bound by default to lifecycle phase: verify -->
				<!-- We bind it to: validate -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${sbking.plugin.maven-checkstyle-plugin.version}</version>
				<configuration>
					<configLocation>checkstyle/sbking_checkstyle.xml</configLocation>
					<encoding>UTF-8</encoding>
					<failOnViolation>true</failOnViolation>
					<enableFilesSummary>false</enableFilesSummary>
					<logViolationsToConsole>true</logViolationsToConsole>
				</configuration>
				<executions>
					<execution>
						<id>checkstyle</id>
						<phase>validate</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Phase: initialize - initialize build state, e.g. set properties or create directories. -->
				<!-- Goal: jacoco-maven-plugin:prepare-agent -->

			<!-- Phase: process-resources - copy and process the resources into the destination directory, ready for packaging. -->
				<!-- Goal: maven-resources-plugin:resources -->
			<!-- Phase: compile - compile the source code -->
				<!-- Goal: maven-compiler-plugin:compile -->
			<!-- Phase: process-test-resources - copy and process the resources into the test destination directory. -->
				<!-- Goal: maven-resources-plugin:testResources -->
			<!-- Phase: test-compile: compile the test source code -->
				<!-- Goal: maven-compiler-plugin:testCompile -->
			<plugin>
				<!-- There are two goals done by maven-compiler-plugin: compiler:compile and compiler:testCompile -->
				<!-- Bound by default to: compile and test-compile -->
				<!-- Here, we exclude the client-only related files -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${sbking.plugin.maven-compiler-plugin.version}</version>
				<configuration>
					<release>17</release> <!-- Target release -->
					<includes> <!-- Just being explicit -->
						<include>br/com/sbk/sbking/**/*.java</include>
					</includes>
					<excludes> <!-- sadly, this does not work sometimes. https://issues.apache.org/jira/browse/MCOMPILER-174 -->
						<exclude>br/com/sbk/sbking/persistence/**/*.java</exclude> <!-- Not using it yet -->
						<exclude>br/com/sbk/sbking/clientapp/ClientApplication.java</exclude> <!-- For mvn verify to run -->
					</excludes>
					<testIncludes> <!-- Just being explicit -->
						<include>br/com/sbk/sbking/**/*.java</include>
					</testIncludes>
					<testExcludes>
						<exclude>br/com/sbk/sbking/persistence/**/*.java</exclude> <!-- Not using it yet -->
					</testExcludes>
				</configuration>
			</plugin>

			<!-- Phase: test - run unit tests -->
			<plugin>
				<!-- Goal: surefire:test -->
				<!-- Bound by default to lifecycle phase: test -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${sbking.plugin.maven-surefire-plugin.version}</version>
				<configuration>
					<excludes>
						<exclude>br/com/sbk/sbking/persistence/*.java</exclude> <!-- This should run on the integration-test phase -->
					</excludes>
				</configuration>
			</plugin>

			<!-- Phase: package - package compiled source code into the distributable format (jar, war, â€¦) -->
			<!-- Spring boot automatically uses maven-jar-plugin and maven-assembly-plugin here -->
				<!-- Goal: maven-jar-plugin:jar -->
				<!-- Goal: spring-boot-maven-plugin:repackage -->
			<plugin>
				<!-- Anyway, the explicit addition of the plugin is needed -->
				<!-- for spring boot to bind spring-boot-maven-plugin:repackage to package phase -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Phase: verify - run any checks to verify the package is valid and meets quality criteria. -->
			<plugin>
				<!-- There are many different goals in jacoco-->
				<!-- According to documentation, prepare-agent and report should bind themselves automatically -->
				<!-- Yet, this does not happen, so we declare them explicitly -->
				<!-- Goal: jacoco-maven-plugin:report -->
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${sbking.plugin.jacoco-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>jacoco-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>jacoco-report</id>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- There are many different goals for spotbugs-->
				<!-- Here, we bind spotbugs:spotbugs to: verify -->
				<!-- Goal: spotbugs:spotbugs -->
				<groupId>com.github.spotbugs</groupId>
				<artifactId>spotbugs-maven-plugin</artifactId>
				<version>${sbking.plugin.spotbugs-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>spotbugs-spotbugs</id>
						<phase>verify</phase>
						<goals>
							<goal>spotbugs</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
